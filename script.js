class MaxMessenger {
    constructor() {
        this.supabase = null;
        this.currentUser = null;
        this.currentServer = null;
        this.currentChannel = null;
        this.currentDM = null;
        this.servers = [];
        this.friends = [];
        this.emojis = ['üòÄ','üòÉ','üòÑ','üòÅ','üòÜ','üòÖ','üòÇ','ü§£','üòä','üòá','üôÇ','üôÉ','üòâ','üòå','üòç','ü•∞','üòò','üòó','üòô','üòö','üòã','üòõ','üòù','üòú','ü§™','ü§®','üßê','ü§ì','üòé','ü§©','ü•≥','üòè','üòí','üòû','üòî','üòü','üòï','üôÅ','‚òπÔ∏è','üò£','üòñ','üò´','üò©','ü•∫','üò¢','üò≠','üò§','üò†','üò°','ü§¨','ü§Ø','üò≥','ü•µ','ü•∂','üò±','üò®','üò∞','üò•','üòì','ü§ó','ü§î','ü§≠','ü§´','ü§•','üò∂','üòê','üòë','üò¨','üôÑ','üòØ','üò¶','üòß','üòÆ','üò≤','ü•±','üò¥','ü§§','üò™','üòµ','ü§ê','ü•¥','ü§¢','ü§Æ','ü§ß','üò∑','ü§í','ü§ï','ü§ë','ü§†','üòà','üëø','üëπ','üë∫','ü§°','üí©','üëª','üíÄ','‚ò†Ô∏è','üëΩ','üëæ','ü§ñ','üéÉ','üò∫','üò∏','üòπ','üòª','üòº','üòΩ','üôÄ','üòø','üòæ'];
        
        this.init();
    }

    async init() {
        await this.initializeSupabase();
        this.setupEventListeners();
        this.loadEmojis();
        this.checkPreviousAuth();
    }

    async initializeSupabase() {
        // –î–ª—è GitHub Pages - –∏—Å–ø–æ–ª—å–∑—É–µ–º demo credentials
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏
        const SUPABASE_URL = 'https://yizjvfyloyemelbvpxst.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlpemp2Znlsb3llbWVsYnZweHN0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE2NTg4ODYsImV4cCI6MjA3NzIzNDg4Nn0.GpUcpeXJCuBFXpFGvTKeIVSi5248KVZSFyMd6NeuJVw';
        
        try {
            this.supabase = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
            console.log('Supabase initialized');
        } catch (error) {
            console.error('Supabase init error:', error);
            this.fallbackToLocalStorage();
        }
    }

    fallbackToLocalStorage() {
        console.log('Using localStorage fallback');
        // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
        this.useLocalStorage = true;
        this.initLocalStorage();
    }

    initLocalStorage() {
        if (!localStorage.getItem('messenger_users')) {
            const defaultUsers = [
                {
                    id: '1',
                    username: 'DemoUser',
                    email: 'demo@example.com',
                    password: '123456',
                    avatar_url: '',
                    badges: ['creator'],
                    status: 'online'
                },
                {
                    id: '2', 
                    username: '–ê–ª–µ–∫—Å–µ–π',
                    email: 'alex@example.com',
                    password: '123456',
                    avatar_url: '',
                    badges: ['nitro'],
                    status: 'online'
                }
            ];
            localStorage.setItem('messenger_users', JSON.stringify(defaultUsers));
        }

        if (!localStorage.getItem('messenger_servers')) {
            const defaultServer = {
                id: '1',
                name: '–î–µ–º–æ —Å–µ—Ä–≤–µ—Ä',
                owner_id: '1',
                channels: [
                    { id: '1', name: '–æ–±—â–∏–π', type: 'text' },
                    { id: '2', name: '–º—É–∑—ã–∫–∞', type: 'text' }
                ],
                members: ['1', '2']
            };
            localStorage.setItem('messenger_servers', JSON.stringify([defaultServer]));
        }

        if (!localStorage.getItem('messenger_messages')) {
            localStorage.setItem('messenger_messages', JSON.stringify([]));
        }

        if (!localStorage.getItem('messenger_friends')) {
            localStorage.setItem('messenger_friends', JSON.stringify([]));
        }
    }

    checkPreviousAuth() {
        const savedUser = localStorage.getItem('currentUser');
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
            this.showApp();
            this.loadUserData();
        } else {
            this.showAuth();
        }
    }

    async handleLogin(e) {
        e.preventDefault();
        const email = document.getElementById('login-email').value;
        const password = document.getElementById('login-password').value;

        if (this.useLocalStorage) {
            // –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ localStorage
            const users = JSON.parse(localStorage.getItem('messenger_users'));
            const user = users.find(u => u.email === email && u.password === password);
            
            if (user) {
                this.currentUser = user;
                localStorage.setItem('currentUser', JSON.stringify(user));
                this.showApp();
                this.loadUserData();
            } else {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }
        } else {
            // –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Supabase
            const { data, error } = await this.supabase.auth.signInWithPassword({
                email,
                password
            });

            if (error) {
                alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
            } else {
                this.currentUser = data.user;
                await this.loadUserData();
                this.showApp();
            }
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        const username = document.getElementById('register-username').value;
        const email = document.getElementById('register-email').value;
        const password = document.getElementById('register-password').value;

        if (this.useLocalStorage) {
            const users = JSON.parse(localStorage.getItem('messenger_users'));
            const existingUser = users.find(u => u.email === email || u.username === username);
            
            if (existingUser) {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }

            const newUser = {
                id: Date.now().toString(),
                username,
                email,
                password,
                avatar_url: '',
                badges: ['new_user'],
                status: 'online'
            };

            users.push(newUser);
            localStorage.setItem('messenger_users', JSON.stringify(users));
            
            alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
            this.switchAuthTab({ target: document.querySelector('.auth-tab[data-tab="login"]') });
        } else {
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
            const { data, error } = await this.supabase.auth.signUp({
                email,
                password
            });

            if (error) {
                alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
                return;
            }

            const { error: profileError } = await this.supabase
                .from('users')
                .insert([
                    {
                        id: data.user.id,
                        username,
                        email,
                        avatar_url: '',
                        badges: ['early']
                    }
                ]);

            if (profileError) {
                alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ' + profileError.message);
            } else {
                alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
                this.switchAuthTab({ target: document.querySelector('.auth-tab[data-tab="login"]') });
            }
        }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Ö–æ–∂–∏–º–∏, –Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π localStorage
}
